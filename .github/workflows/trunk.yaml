name: trunk

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

  lint:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Run lint
        run: npm run lint

  unit_test:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore dependencies cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Run tests
        run: npm test

  test:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore dependencies cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Run tests
        run: |
              sudo npm run start &
              sudo apt update -yqq && sudo apt install net-tools netcat -yqq
              netstat -antlp | grep LISTEN
              nc -vv -w 3 127.0.0.1 3000 || true
      - name: Test app
        env:
          URL: localhost:3000
        run: |
          endpoints=("/hello" "/ping" "/current-date" "/fibo/1")
          for endpoint in "${endpoints[@]}"; do
            echo "[INFO] endpoint=${endpoint}"
            status_code=$(curl --write-out '%{http_code}' -s --output /dev/null http://${URL}${endpoint})
            if [[ $status_code == "200" ]]; then
              echo "[INFO] status_code=${status_code}"
            else
              echo "[ERROR] endpoint=${endpoint} status_code=${status_code}"
              exit 1
            fi
          done

  e2e:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run docker-compose
        run: |
          docker-compose up --build -d --quiet-pull --no-color
          sudo apt update -yqq && sudo apt install net-tools netcat -yqq
          docker-compose logs
          docker-compose ps
          netstat -antlp | grep LISTEN
          nc -vv -w 3 127.0.0.1 3000 || true
      - name: Test app
        env:
          URL: localhost:3000
        run: |
          endpoints=("/hello" "/ping" "/current-date" "/fibo/1")
          for endpoint in "${endpoints[@]}"; do
            echo "[INFO] endpoint=${endpoint}"
            status_code=$(curl --write-out '%{http_code}' -s --output /dev/null http://${URL}${endpoint})
            if [[ $status_code == "200" ]]; then
              echo "[INFO] status_code=${status_code}"
            else
              echo "[ERROR] endpoint=${endpoint} status_code=${status_code}"
              exit 1
            fi
          done

  check_commit:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Check commit
        id: check_commit
        shell: bash
        run: |
          echo "[INFO] checking commit..."
          owner_and_repo=${{ github.repository }}
          owner=$(echo $owner_and_repo | cut -d/ -f1)
          repo=$(echo $owner_and_repo | cut -d/ -f2)

          ref=`curl -L -s -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.PGH_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/repos/$owner/$repo/commits/$GITHUB_SHA/pulls | jq -re '.[].head.ref'` || true
          ref=`echo "$ref" | tr '[:upper:]' '[:lower:]'`
          echo "[INFO] ref=$ref"

          if [[ -z $ref ]] || [[ $ref == 'null' ]]; then
            echo "[WARN] The commit doesn't have PR"
            skip_staging=false
            version_type=patch
          elif [[ $ref =~ ^hotfix/ ]]; then
            echo "[INFO] The commit comes from hotfix: ref=$ref"
            skip_staging=true
            version_type=patch
          elif [[ $ref =~ ^release/ ]]; then
            echo "[INFO] The commit comes from release: ref=$ref"
            skip_staging=true
            version_type=minor
          else
            echo "[INFO] The commit's PR is not hotfix/release: ref=$ref"
            skip_staging=false
            version_type=minor
          fi
          echo "[INFO] skip_staging=$skip_staging version_type=$version_type" 
          
          pr_url=`curl -L -s -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.PGH_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/repos/$owner/$repo/commits/$GITHUB_SHA/pulls | jq -re '.[].url'` || true
          if [[ ! -z $pr_url ]] && [[ $pr_url != 'null' ]]; then
            last_commit_msg=`curl -L -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.PGH_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28" $pr_url/commits | jq -re '.[-1].commit.message'`
            last_commit_msg=`echo "$last_commit_msg" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
            echo "[INFO] last_commit_msg=$last_commit_msg"
            if [[ "${last_commit_msg}" == [patch]* ]]; then
              version_type=patch
            elif [[ "${last_commit_msg}" == [minor]* ]]; then
              version_type=minor
            elif [[ "${last_commit_msg}" == [major]* ]]; then
              version_type=major
            fi
          else
            version_type=patch
          fi
          
          echo "[INFO] version_type=$version_type"
          echo "skip_staging=$skip_staging" >> $GITHUB_OUTPUT
          echo "version_type=$version_type" >> $GITHUB_OUTPUT
    outputs:
      skip_staging: ${{ steps.check_commit.outputs.skip_staging }}
      version_type: ${{ steps.check_commit.outputs.version_type }}
  
  version_bump:
    runs-on: ubuntu-latest
    needs: [lint, unit_test, test, e2e, check_commit]
    if: ${{ github.ref == 'refs/heads/main' }}
    env:
      VERSION_TYPE: ${{ needs.check_commit.outputs.version_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get new version
        id: new_version
        run: |
          package_version=`node -p "require('./package.json').version"`
          echo "[INFO] package_version=$package_version version_type=${{env.VERSION_TYPE}}"
          pip install --no-cache-dir semantic-version
          new_version=$(
            case "${{env.VERSION_TYPE}}" in
              ("major") python -c "import semantic_version; v=semantic_version.Version('${package_version}'); print(v.next_major())" ;;
              ("patch") python -c "import semantic_version; v=semantic_version.Version('${package_version}'); print(v.next_patch())" ;;
              (*) python -c "import semantic_version; v=semantic_version.Version('${package_version}'); print(v.next_minor())" ;;
            esac)
          echo "[INFO] new_version=$new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
      - name: Bump version
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git pull
          echo "[INFO] get current version..."
          cat package.json | jq .version
          echo "[INFO] version_type=${{env.VERSION_TYPE}} new_version=${{ env.new_version }}"
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.new_version }}\"/" package.json
          echo "[INFO] verify new version..."
          cat package.json | jq .version
          git status
          git add package.json
          git commit -m "[skip ci][GithubAction] Bump version to ${{env.new_version}}"
          git push origin -o skip.ci
          git tag -a "v${{ env.new_version }}" -m "Version v${{ env.new_version }}"
          git push origin "v${{ env.new_version }}"
    outputs:
      new_version: ${{ steps.new_version.outputs.new_version }}

  build:
    runs-on: ubuntu-latest
    needs: [lint, unit_test, test, e2e, check_commit, version_bump]
    if: ${{ github.ref == 'refs/heads/main' }}
    env:
      DOCKER_USER: debu99
      DOCKER_REPO: hello-world
      NEW_VERSION: ${{ needs.version_bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create env
        run: |
          export IMAGE="${DOCKER_USER}/${DOCKER_REPO}"
          export GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "GIT_HASH=$GIT_HASH" >> $GITHUB_ENV
          echo "[INFO] IMAGE=${IMAGE} GIT_HASH=$GIT_HASH NEW_VERSION=${{env.NEW_VERSION}}"
      - name: Build the image
        id: build
        run: |
          docker build --file Dockerfile -t "${{env.IMAGE}}:${{env.NEW_VERSION}}" -t "${{env.IMAGE}}:${{env.GIT_HASH}}" -t "${{env.IMAGE}}:latest" .
          docker images | grep ${{env.IMAGE}}
      - name: Scan the image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.DOCKER_USER}}/${{env.DOCKER_REPO}}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      - name: Push the image
        run: |
          docker images | grep ${{env.IMAGE}}
          docker login -u ${{env.DOCKER_USER}} -p ${{ secrets.DOCKER_PASSWORD }}
          echo "[INFO] IMAGE=${{env.IMAGE}} GIT_HASH=${{env.GIT_HASH}} NEW_VERSION=${{env.NEW_VERSION}}"
          docker push "${{env.IMAGE}}:${{env.NEW_VERSION}}"
          docker push "${{env.IMAGE}}:${{env.GIT_HASH}}"
          docker push "${{env.IMAGE}}:latest"

  staging_deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
    - check_commit
    - build
    env:
      SKIP_STAGING: ${{ needs.check_commit.outputs.skip_staging }}
    steps:
      - name: Echo
        run: echo "[INFO] SKIP_STAGING=${{ env.SKIP_STAGING }}"

      - name: Setup Helm
        if: ${{ env.SKIP_STAGING == 'false' }}
        uses: Azure/setup-helm@v3
        with:
          version: 'v3.8.2'

      - name: Deploy to staging
        if: ${{ env.SKIP_STAGING == 'false' }}
        run: |
          echo "[INFO] not Hotfix/Release branch"
          helm version
          #helm upgrade --install my-app-staging ./helm-chart -f ./helm-chart/values.staging.yaml

      - name: Smoke test
        if: ${{ env.SKIP_STAGING == 'false' }}
        env:
          APP_DOMAIN: "https://app.vic510.click"
          APP_PORT: "8000"
          APP_NAMESPACE: "dev"
          HEALTHCHECK_URL: '/health'
        run: |
          echo "staging smoke test"

  prod_deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    needs:
    - check_commit
    - build
    - staging_deploy
    environment: 'prod'
    steps:
      - name: Setup Helm
        uses: Azure/setup-helm@v3
        with:
          version: 'v3.8.2'

      - name: Deploy to production
        run: |
          echo "[INFO] main branch detected"
          helm version
          #helm upgrade --install my-app-prod ./helm-chart -f ./helm-chart/values.prod.yaml

      - name: Smoke test
        env:
          APP_DOMAIN: "https://app.vic510.click"
          APP_PORT: "8000"
          APP_NAMESPACE: "dev"
          HEALTHCHECK_URL: '/health'
        run: |
          echo "prod smoke test"
