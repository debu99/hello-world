name: CI

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install

  lint:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Run lint
        run: npm run lint

  unit_test:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore dependencies cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Run tests
        run: npm test

  test:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore dependencies cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Run tests
        run: |
              sudo npm run start &
              sudo apt update -yqq && sudo apt install net-tools netcat -yqq
              netstat -antlp | grep LISTEN
              nc -vv -w 3 127.0.0.1 3000 || true
      - name: Test app
        env:
          URL: localhost:3000
        run: |
          endpoints=("/hello" "/ping" "/current-date" "/fibo/1")
          for endpoint in "${endpoints[@]}"; do
            echo "[INFO] endpoint=${endpoint}"
            status_code=$(curl --write-out '%{http_code}' -s --output /dev/null http://${URL}${endpoint})
            if [[ $status_code == "200" ]]; then
              echo "[INFO] status_code=${status_code}"
            else
              echo "[ERROR] endpoint=${endpoint} status_code=${status_code}"
              exit 1
            fi
          done

  e2e:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run docker-compose
        run: |
          docker-compose up --build -d --quiet-pull --no-color
          sudo apt update -yqq && sudo apt install net-tools netcat -yqq
          docker-compose logs
          docker-compose ps
          netstat -antlp | grep LISTEN
          nc -vv -w 3 127.0.0.1 3000 || true
      - name: Test app
        env:
          URL: localhost:3000
        run: |
          endpoints=("/hello" "/ping" "/current-date" "/fibo/1")
          for endpoint in "${endpoints[@]}"; do
            echo "[INFO] endpoint=${endpoint}"
            status_code=$(curl --write-out '%{http_code}' -s --output /dev/null http://${URL}${endpoint})
            if [[ $status_code == "200" ]]; then
              echo "[INFO] status_code=${status_code}"
            else
              echo "[ERROR] endpoint=${endpoint} status_code=${status_code}"
              exit 1
            fi
          done
  build:
    runs-on: ubuntu-latest
    needs: [lint, unit_test, test, e2e]
    if: ${{ github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main' }}
    env:
      DOCKER_USER: debu99
      DOCKER_REPO: hello-world
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create env
        run: |
          export IMAGE="${DOCKER_USER}/${DOCKER_REPO}"
          export GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "GIT_HASH=$GIT_HASH" >> $GITHUB_ENV
      - name: Build the image
        id: build
        run: |
          docker build --file Dockerfile -t "${{env.IMAGE}}:${{env.GIT_HASH}}" -t "${{env.IMAGE}}:latest" .
          docker images | grep ${{env.IMAGE}}
      - name: Scan the image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.DOCKER_USER}}/${{env.DOCKER_REPO}}:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      - name: Push the image
        run: |
          docker images | grep ${{env.IMAGE}}
          docker login -u ${{env.DOCKER_USER}} -p ${{ secrets.DOCKER_PASSWORD }}
          echo "[INFO]IMAGE=${{env.IMAGE}} GIT_HASH=${{env.GIT_HASH}} "
          docker push "${{env.IMAGE}}:${{env.GIT_HASH}}"
          docker push "${{env.IMAGE}}:latest"